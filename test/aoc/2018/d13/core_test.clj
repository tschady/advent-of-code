(ns aoc.2018.d13.core-test
  (:require [aoc.2018.d13.core :as sut]
            [clojure.test :refer :all]))

(def test-seq
  [["/->-\\"
    "|   |  /----\\"
    "| /-+--+-\\  |"
    "| | |  | v  |"
    "\\-+-/  \\-+--/"
    "\\------/"]
   ["/-->\\"
    "|   |  /----\\"
    "| /-+--+-\\  |"
    "| | |  | |  |"
    "\\-+-/  \\->--/"
    "\\------/"]
   ["/---v"
    "|   |  /----\\"
    "| /-+--+-\\  |"
    "| | |  | |  |"
    "\\-+-/  \\-+>-/"
    "\\------/"]
   ["/---\\"
    "|   v  /----\\"
    "| /-+--+-\\  |"
    "| | |  | |  |"
    "\\-+-/  \\-+->/"
    "\\------/"]
   ["/---\\"
    "|   |  /----\\"
    "| /->--+-\\  |"
    "| | |  | |  |"
    "\\-+-/  \\-+--^"
    "\\------/"]
   ["/---\\"
    "|   |  /----\\"
    "| /-+>-+-\\  |"
    "| | |  | |  ^"
    "\\-+-/  \\-+--/"
    "\\------/"]
   ["/---\\"
    "|   |  /----\\"
    "| /-+->+-\\  ^"
    "| | |  | |  |"
    "\\-+-/  \\-+--/"
    "\\------/"]
   ["/---\\"
    "|   |  /----<"
    "| /-+-->-\\  |"
    "| | |  | |  |"
    "\\-+-/  \\-+--/"
    "\\------/"]
   ["/---\\"
    "|   |  /---<\\"
    "| /-+--+>\\  |"
    "| | |  | |  |"
    "\\-+-/  \\-+--/"
    "\\------/"]
   ["/---\\"
    "|   |  /--<-\\"
    "| /-+--+-v  |"
    "| | |  | |  |"
    "\\-+-/  \\-+--/"
    "\\------/"]
   ["/---\\"
    "|   |  /-<--\\"
    "| /-+--+-\\  |"
    "| | |  | v  |"
    "\\-+-/  \\-+--/"
    "\\------/"]
   ["/---\\"
    "|   |  /<---\\"
    "| /-+--+-\\  |"
    "| | |  | |  |"
    "\\-+-/  \\-<--/"
    "\\------/"]
   ["/---\\"
    "|   |  v----\\"
    "| /-+--+-\\  |"
    "| | |  | |  |"
    "\\-+-/  \\<+--/"
    "\\------/"]
   ["/---\\"
    "|   |  /----\\"
    "| /-+--v-\\  |"
    "| | |  | |  |"
    "\\-+-/  ^-+--/"
    "\\------/"]
   ["/---\\"
    "|   |  /----\\"
    "| /-+--+-\\  |"
    "| | |  X |  |"
    "\\-+-/  \\-+--/"
    "\\------/"]])

(deftest part1-examples
  (is (= [7 3] (sut/part-1 (first test-seq)))))

;; (deftest part2-examples
;;   (are [input output] (= output (sut/part-2 input))
;;     [+1 -1] 0
;;     [+3 +3 +4 -2 -4] 10
;;     [-6 +3 +8 +5 -6] 5
;;     [+7 +7 -2 -7 -4] 14))

;; (deftest challenge
;;   (is (= 400 (sut/part-1 sut/input)))
;;   (is (= 232 (sut/part-2 sut/input))))
